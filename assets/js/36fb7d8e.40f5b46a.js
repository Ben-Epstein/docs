"use strict";(self.webpackChunkflojoy_doc=self.webpackChunkflojoy_doc||[]).push([[1971],{62605:(e,t,n)=>{n.d(t,{Z:()=>I});var r=n(67294),a=n(74866),l=n(85162),i=n(11570),o=n(32871),s=n(83599);n(99869);const d=(0,r.memo)((e=>{let{data:t}=e;return r.createElement(r.Fragment,null,r.createElement(i.HH,{type:"target",position:i.Ly.Left,style:{background:"#555"}}),r.createElement("div",null,r.createElement("strong",null,t.label)),r.createElement(i.HH,{type:"source",position:i.Ly.Right,id:"b"}))}));var E=n(33140),m=n(73091),c=n(2029),p=n(76887),u=n(49188),S=n(92949);const h={default:d},y={tickLabels:{fontSize:8,fill:"#BCC2C4"},label:{fontSize:8,fill:"#BCC2C4"}};function I(e){let{children:t,data:n,GLink:d}=e;const{colorMode:I}=(0,S.I)();if(!t)return r.createElement(r.Fragment,null,r.createElement("blockquote",null,"No examples have been written for this node yet. You can add some ",r.createElement("a",{href:`${u.i}/${d}`,target:"_blank"},"here")),r.createElement("br",null)," ",r.createElement("br",null));const R=JSON.parse(t).rfInstance,g="20em";return r.createElement("div",null,r.createElement(a.Z,null,r.createElement(l.Z,{value:"app",label:"App",default:!0},r.createElement(i.tV,null,r.createElement("div",{style:{height:g}},r.createElement(i.x$,{nodes:R.nodes,nodeTypes:h,edges:R.edges,fitView:!0,proOptions:{hideAttribution:!0}},r.createElement(o.a,{style:{backgroundColor:"light"===I?"rgba(0, 0, 0, 0.1)":"rgba(255, 255, 255, 0.1)",height:80,width:150},nodeColor:"light"===I?"rgba(0, 0, 0, 0.25)":"rgba(255, 255, 255, 0.25)",maskColor:"light"===I?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",zoomable:!0,pannable:!0}),r.createElement(s.A,null))))),r.createElement(l.Z,{value:"output",label:"Output"},r.createElement("div",{style:{minHeight:g}},r.createElement(E.k,null,r.createElement(m.E,{label:"x",style:y}),r.createElement(m.E,{dependentAxis:!0,label:"y",style:y}),r.createElement(c.C,{style:{data:{fill:"#7B61FF"}},size:1,data:n})))),r.createElement(l.Z,{value:"spec",label:"App JSON spec"},r.createElement("div",{style:{minHeight:g}},r.createElement(p.L,{data:R})))))}},89418:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(67294),a=n(25365);function l(e){let{children:t,index:n,folderPath:l}=e;const i=["notes.md","hardware.md","media.md"],o=["Theory and technical notes","Parts list and drivers","Media"][n],s="https://github.com/flojoy-io/docs/tree/main/docs/"+l+i[n],d="string"==typeof t&&t.includes("Driver doc :");return r.createElement(r.Fragment,null,r.createElement("br",null),r.createElement("details",null,r.createElement("summary",null,r.createElement("span",{style:{display:"inline-block",cursor:"pointer"}},r.createElement("h4",null,o))),d?null:""!==t?r.createElement(a.D,null,t):r.createElement(a.D,null,["No theory or technical notes have been contributed for this node yet.","This node does not require any peripheral hardware to operate. Please see INSTRUMENTS for nodes that interact with the physical world through connected hardware.","No supporting screenshots, photos, or videos have been added to the media.md file for this node."][n]),r.createElement("br",null),r.createElement("small",null,r.createElement("i",null,r.createElement("a",{href:s},"Edit ",i[n]," on GitHub")))),r.createElement("hr",null))}},57685:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(67294),a=n(5673),l=n(70266),i=n(7284),o=n(85012),s=n(92949);function d(e){let{children:t}=e;const{colorMode:n}=(0,s.I)();if(""===t.trim())return r.createElement(r.Fragment,null,r.createElement("blockquote",null,"This function does not have a docstring description yet."),r.createElement("br",null)," ",r.createElement("br",null));const l=t;return r.createElement(r.Fragment,null,r.createElement(a.Z,{language:"yaml",style:"dark"===n?i.Z:o.Z},l),r.createElement("br",null))}a.Z.registerLanguage("yaml",l.Z)},47062:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(67294),a=n(74160);function l(e){let{children:t}=e;if(""===t.trim())return r.createElement("blockquote",null,"This node does not currently have any input parameters.");const n=a.ZP.parse(t);return r.createElement("div",null,r.createElement("h3",null,"Input parameters"),Object.keys(n).map((e=>r.createElement(r.Fragment,null,r.createElement("details",null,r.createElement("summary",{key:e},r.createElement("code",null,e)),r.createElement("ul",null,Object.keys(n[e]).map((t=>r.createElement("li",{key:t},t," : ",JSON.stringify(n[e][t],void 0,4))))))))))}},79267:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(67294),a=n(60614),l=n(49188);function i(e){let{GLink:t,children:n}=e,i=n;if(i.includes('"""')){let e=i.split('"""')[0],t=i.split('"""')[2];i=e.trimEnd()+t.trimStart().replace("\n\n","\n")}return r.createElement("div",null,r.createElement("div",{style:{display:"flex",gap:"5px",justifyContent:"flex-start",alignItems:"center"}},r.createElement("h3",{style:{marginBottom:0}},"Python code"),r.createElement("a",{href:`${l.i}/${t}`,target:"_blank",rel:"noopener noreferrer",class:"navbar__item navbar__link header-github-link","aria-label":"GitHub repository",style:{padding:"5px"}},"Github",r.createElement("svg",{width:"13.5",height:"13.5","aria-hidden":"true",viewBox:"0 0 24 24",class:"iconExternalLink_node_modules-@docusaurus-theme-classic-lib-theme-Icon-ExternalLink-styles-module"},r.createElement("path",{fill:"currentColor",d:"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"})))),r.createElement("details",{open:!0},r.createElement(a.Z,{className:"language-python"},i)),r.createElement("br",null))}},91906:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(67294);function a(){return r.createElement(r.Fragment,null,r.createElement("br",null),r.createElement("br",null),r.createElement("hr",null),r.createElement("br",null),r.createElement("br",null))}},49188:(e,t,n)=>{n.d(t,{i:()=>a,j:()=>r});const r={windows:"/getting-started/install/?platform=windows",mac:"/getting-started/install/?platform=unix"},a="https://github.com/flojoy-io/nodes/tree/main"},10736:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>I,default:()=>N,frontMatter:()=>y,metadata:()=>R,toc:()=>f});var r=n(87462),a=(n(67294),n(3905)),l=n(57685),i=n(79267),o=n(47062),s=n(62605),d=n(91906),E=n(89418);const m='\n    Node to take a single reading of data from an Ardunio,\n    or a similar serial device.\n    For example you can record temperature following this tutorial:\n\n    https://learn.adafruit.com/thermistor/using-a-thermistor\n\n    with Serial.println(steinhart) as the only line printing.\n\n    It is important that the last line Arduino is returning is the\n    data with a new line at the end (i.e. println()).\n\n    The other lines must be returned with print()\n    with print(",") between each line.\n\n    For example:\n\n    print(reading0)\n    print(",")\n    println(reading1)\n\n    If there is more than one column, the SELECT_ARRAY node must be\n    used after this node.\n\n    params:\n    BAUD_RATE: Baud rate for the serial device.\n    com_port: COM port of the serial device\n    ',c='from flojoy import flojoy, DataContainer\nfrom time import sleep\nimport serial\nimport numpy as np\nfrom datetime import datetime\nimport plotly.graph_objects as go\n\n\n@flojoy\ndef SERIAL_SINGLE_MEASUREMENT(dc_inputs, params):\n    \n    print("parameters passed to SERIAL_TIMESERIES: ", params)\n    COM_PORT = params["comport"]\n    BAUD = int(params["baudrate"])\n\n    ser = serial.Serial(COM_PORT, timeout=1, baudrate=BAUD)\n    # The first reading is commonly empty.\n    s = ser.readline().decode()\n\n    # Some readings may be empty. Try a second time if so.\n    if s != "":\n        reading = s[:-2].split(",")\n    else:\n        s = ser.readline().decode()\n        reading = s[:-2].split(",")\n\n    reading = np.array(reading)\n    reading = reading.astype("float64")\n\n    data = go.Line(x=[0], y=[0], mode="markers")\n    fig = go.Figure(data=data)\n    return DataContainer(type="plotly", fig=fig, x=[0], y=reading)\n\n\n@flojoy\ndef SERIAL_SINGLE_MEASUREMENT_MOCK(dc, params):\n    print("Running mock version of Serial")\n\n    x = np.linspace(0, 100, 100)\n    y = np.linspace(0, 100, 100)\n\n    return DataContainer(x=x, y=y)\n',p="baudrate:\n  default: 9600\n  type: float\ncomport:\n  default: /dev/ttyUSB0\n  type: string\n",u="## Notes and Documentation:\n",S="## HARDWARE required:\n\n- An Arduino microcontroller.\n",h="## Images Links :\n\n- TODO : Choose and upload images with Cloudinary\n",y={},I=void 0,R={unversionedId:"nodes/INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT/SERIAL_SINGLE_MEASUREMENT",id:"nodes/INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT/SERIAL_SINGLE_MEASUREMENT",title:"SERIAL_SINGLE_MEASUREMENT",description:"[//]: # (Custom component imports)",source:"@site/docs/nodes/INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT/SERIAL_SINGLE_MEASUREMENT.md",sourceDirName:"nodes/INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT",slug:"/nodes/INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT/",permalink:"/nodes/INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"main",previous:{title:"STEPPER_DRIVER_TIC",permalink:"/nodes/INSTRUMENTS/STEPPER_MOTOR/STEPPER_DRIVER_TIC/"},next:{title:"SERIAL_TIMESERIES",permalink:"/nodes/INSTRUMENTS/SERIAL/SERIAL_TIMESERIES/"}},g={},f=[{value:"Examples",id:"examples",level:2},{value:"Appendix",id:"appendix",level:2}],T={toc:f},A="wrapper";function N(e){let{components:t,...n}=e;return(0,a.kt)(A,(0,r.Z)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(l.Z,{mdxType:"DocString"},m),(0,a.kt)(i.Z,{GLink:"INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT/SERIAL_SINGLE_MEASUREMENT.py",mdxType:"PythonCode"},c),(0,a.kt)(o.Z,{mdxType:"Parameters"},p),(0,a.kt)(d.Z,{mdxType:"SectionBreak"}),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)(s.Z,{GLink:"INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT",nodeLabel:"SERIAL_SINGLE_MEASUREMENT",mdxType:"AppDisplay"}),(0,a.kt)(d.Z,{mdxType:"SectionBreak"}),(0,a.kt)("h2",{id:"appendix"},"Appendix"),(0,a.kt)(E.Z,{index:0,folderPath:"nodes/INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT/appendix/",mdxType:"AppendixSection"},u),(0,a.kt)(E.Z,{index:1,folderPath:"nodes/INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT/appendix/",mdxType:"AppendixSection"},S),(0,a.kt)(E.Z,{index:2,folderPath:"nodes/INSTRUMENTS/SERIAL/SERIAL_SINGLE_MEASUREMENT/appendix/",mdxType:"AppendixSection"},h))}N.isMDXComponent=!0}}]);